{"version":3,"sources":["webpack://cosmicLib/webpack/universalModuleDefinition","webpack://cosmicLib/webpack/bootstrap","webpack://cosmicLib/./src/status.js","webpack://cosmicLib/./node_modules/babel-runtime/regenerator/index.js","webpack://cosmicLib/./src/specs.js","webpack://cosmicLib/./src/helpers.js","webpack://cosmicLib/./src/node.js","webpack://cosmicLib/./src/resolve.js","webpack://cosmicLib/./src/event.js","webpack://cosmicLib/./src/convert.js","webpack://cosmicLib/./src/format.js","webpack://cosmicLib/./src/parse.js","webpack://cosmicLib/./src/encode.js","webpack://cosmicLib/./src/prepare.js","webpack://cosmicLib/./src/check.js","webpack://cosmicLib/./src/decode.js","webpack://cosmicLib/./src/action.js","webpack://cosmicLib/./node_modules/regenerator-runtime/runtime.js","webpack://cosmicLib/./node_modules/regenerator-runtime/runtime-module.js","webpack://cosmicLib/./src/cosmic-lib.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","update","message","fail","cosmicLink","status","continuation","node","appendClass","statusNode","_errorContinuation","error","console","log","errorNode","errors","push","className","grab","_stateNode","textContent","event","lineNode","create","append","_eventsNode","Error","transactionOptionalFields","operationMandatoryFields","accountMerge","allowTrust","changeTrust","createAccount","createPassiveOffer","inflation","manageData","manageOffer","pathPayment","payment","setOptions","operationOptionalFields","fieldType","amount","asset","assetCode","authorize","buying","clearFlags","destAsset","destAmount","destination","fee","highThreshold","homeDomain","inflationDest","limit","lowThreshold","masterWeight","maxTime","medThreshold","memo","minTime","network","offerId","price","path","selling","sendAsset","sendMax","setFlags","signer","source","startingBalance","trustor","delay","thunk","firstCall","memoized","Promise","resolve","timeout","x","setTimeout","capitalize","string","substr","toUpperCase","slice","shorter","length","element","_len","arguments","childs","Array","_key","forEach","child","appendChild","document","createTextNode","clear","innerHTML","newClass","copyContent","select","execCommand","attributes","createElement","id","subtstr","field","_len2","_key2","concat","destroy","parentNode","removeChild","e","pattern","parent","undefined","getElementById","getElementsByClassName","getElementsByTagName","rewrite","_len3","_key3","_callee","address","promise","_regenerator2","default","wrap","_context","prev","next","_accountCache","_helpers","accountCacheExpiration","stop","this","_callee2","account","_context2","match","StellarSdk","FederationServer","sent","account_id","abrupt","t0","selectNetwork","Network","useTestNetwork","usePublicNetwork","_resolveAddress","_cacheAccount","handle","trigger","type","onClick","handler","defaultHandler","alert","issuerNode","style","display","json","tdesc","builder","operation","jsonToTdesc","user","server","_makeTransactionBuilder","_odescToOperation","operations","addOperation","build","odesc","keys","t1","done","prepare","fieldValue","Operation","_callee3","opts","loadedAccount","memoType","memoValue","_context3","timebounds","_loadAccount","TransactionBuilder","memo_type","addMemo","Memo","_callee4","publicKey","_context4","loadAccount","uriToQuery","uri","replace","queryToJson","query","isValid","specs","queries","split","index","argument","temp","decodedValue","decode","_isTransactionField","errorObject","native","Asset","mandatoryFields","_isOperationField","tdescToJson","transactionToXdr","transaction","toEnvelope","toXDR","xdrToTransaction","xdr","Transaction","transactionToJson","options","copy","JSON","parse","stringify","signatures","tx","sequence","stripSource","_memo","_switch","_arm","_value","toString","timeBounds","line","ed25519PublicKey","sha256Hash","preAuthTx","jsonToQuery","encode","queryToUri","page","indexOf","addressNode","grandpa","title","memo_format","onclick","trNode","transactionNode","infoNode","entry","_fieldDesc","opNode","meaning","msg","weight","_odescToMeaning","fieldNode","txt","_formatOdesc","_typeof","_format","_makeHashNode","hash","textBox","_resolveAddressAndUpdate","codeNode","code","assetNode","issuer","assetsArray","assetsArrayNode","date","timestamp","Date","toLocaleString","flags","typeNode","valueNode","signerNode","setPage","_page","encodeURI","makeConverter","_network","Server","dispatch","convert","_guessType","parser","typeParser","typeTowardAll","getTdesc","then","format","apply","typeTowardAllUsingDelayed","delayed","_this","typeTowardXdr","_len4","_key4","typeTowardUri","_asyncToGenerator","mark","getJson","from","to","_len5","_key5","_this2","getFrom","getTo","converter","xdrUri","getQuery","result","encoder","boolean","toISOString","typedValue","preparer","_callee5","preparedAsset","_context5","_callee6","preparedSigner","_context6","number","toLowerCase","threshold","min","max","num","isNaN","checker","decodeURIComponent","assetsList","parsedAsset","timeStamp","previousNetwork","numerator","denominator","check","decoder","assetLower","seed","keypair","signingPromise","Keypair","fromSecret","signers","_signingPromise","getTransaction","getXdr","eventNode","_addLoadingAnim","sign","answer","submitTransaction","loadingAnim","insertBefore","firstChild","float","global","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","regeneratorRuntime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","key","reverse","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","resetTryEntry","charAt","rootRecord","completion","rval","dispatchException","exception","context","loc","caught","record","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","reject","invoke","unwrapped","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function","g","hadRuntime","getOwnPropertyNames","oldRuntime","action","CosmicLink","_classCallCheck","makeHtmlNodes","send"],"mappings":"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","file":"cosmic-lib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cosmicLib\"] = factory();\n\telse\n\t\troot[\"cosmicLib\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","'use strict'\n\nimport * as node from './node'\n\n/**\n * Contains the methods to update cosmic link status and HTML status node.\n * This is mostly about error handling.\n *\n * @module\n */\n\n/**\n * Set `cosmicLink` status as `status` and update statusNode.\n * All status are considered erroneous except 'signed' & 'sended'.\n * Error status should be recorder using the fail function bellow.\n * A valid cosmic link may have no status at all.\n * `status` changes are logged.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} status\n */\nexport function update (cosmicLink, status) {\n  console.log('Set status: ' + status)\n  if (cosmicLink) {\n    cosmicLink.status = status\n    _stateNode(cosmicLink).textContent = '↪ ' + status\n  }\n}\n\n/**\n * Log event into the console.\n * Append `event` to the HTML event list of `cosmicLink` (in statusNode).\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} event\n * @return {HTLMElement} The <li>event</li> inserted into events list\n */\nexport function message (cosmicLink, event) {\n  const lineNode = node.create('li', {}, event)\n  if (cosmicLink) node.append(_eventsNode(cosmicLink), lineNode)\n  return lineNode\n}\n\n/**\n * Set `cosmicLink` status as error status `status` and update statusNode.\n * This implies that the cosmic link or the underlying transaction is invalid.\n * Then, call `continuation` if any. `continuation` should be a either a\n * function or 'throw'.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} status\n * @param {function|'throw'} [continuation]\n */\nexport function fail (cosmicLink, status, continuation) {\n  update(cosmicLink, status)\n  if (cosmicLink) node.appendClass(cosmicLink.statusNode, 'CL_error')\n  _errorContinuation(status, continuation)\n}\n\n/**\n * Append `error` to `cosmicLink`.errors and to its the HTML event list.\n * Then, call `continuation` if any. `continuation` should be a either a\n * function or 'throw'.\n * `error`s are logged.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} error\n * @param {procedure|'throw'} [continuation]\n */\nexport function error (cosmicLink, error, continuation) {\n  console.log(error)\n  const errorNode = message(cosmicLink, error)\n\n  if (cosmicLink) {\n    if (!cosmicLink.errors) cosmicLink.errors = []\n    cosmicLink.errors.push(error)\n    errorNode.className = 'CL_error'\n  }\n\n  _errorContinuation(error, continuation)\n}\n\n/**\n * Return the head of `cosmicLink` statusNode.\n *\n * @private\n * @param {cosmicLink} cosmicLink\n */\nfunction _stateNode (cosmicLink) {\n  return node.grab('.CL_status', cosmicLink.statusNode)\n}\n\n/**\n * Return the list of `cosmicLink` statusNode.\n *\n * @private\n * @param {cosmicLink} cosmicLink\n */\nfunction _eventsNode (cosmicLink) {\n  return node.grab('.CL_events', cosmicLink.statusNode)\n}\n\n/**\n * If `continuation` is a function, call it with `error` as argument.\n * If `continuation` equal 'throw', throw a new error with *error as message.\n * If *continuation is undefined, do nothing.\n *\n * @private\n * @param {string} error\n * @param {function|'throw'} [continuation]\n */\nfunction _errorContinuation (error, continuation) {\n  if (continuation) {\n    if (continuation === 'throw') throw new Error(error)\n    else continuation(error)\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","\n/**\n * Contains Stellar transactions specification.\n *\n * @module\n */\n\n/**\n * Transaction optional fields.\n */\nexport const transactionOptionalFields = [\n  'network',\n  'source', 'fee', 'minTime', 'maxTime', 'memo'\n]\n\n/**\n * Operation mandatory fields.\n */\nexport const operationMandatoryFields = {\n  accountMerge: ['destination'],\n  allowTrust: ['assetCode', 'trustor'],\n  changeTrust: ['asset'],\n  createAccount: ['destination', 'startingBalance'],\n  createPassiveOffer: ['selling', 'buying', 'amount', 'price'],\n  inflation: [],\n  manageData: ['name'],\n  manageOffer: ['selling', 'buying', 'amount', 'price'],\n  pathPayment: ['sendAsset', 'sendMax', 'destination', 'destAsset', 'destAmount'],\n  payment: ['asset', 'destination', 'amount'],\n  setOptions: []\n}\n\n/**\n * Operation optionnal fields.\n */\nexport const operationOptionalFields = {\n  accountMerge: ['source'],\n  allowTrust: ['authorize', 'source'],\n  changeTrust: ['limit', 'source'],\n  createAccount: ['source'],\n  createPassiveOffer: ['source'],\n  inflation: ['source'],\n  manageData: ['value', 'source'],\n  manageOffer: ['offerId', 'source'],\n  pathPayment: ['path', 'source'],\n  payment: ['source'],\n  setOptions: ['inflationDest', 'clearFlags', 'setFlags', 'masterWeight',\n    'lowThreshold', 'medThreshold', 'highThreshold', 'signer', 'homeDomain',\n    'source']\n}\n\n/**\n * Field types.\n */\nexport const fieldType = {\n  amount: 'amount',\n  asset: 'asset',\n  assetCode: 'string',\n  authorize: 'boolean',\n  buying: 'asset',\n  clearFlags: 'flags',\n  destAsset: 'asset',\n  destAmount: 'amount',\n  destination: 'address',\n  fee: 'amount',\n  highThreshold: 'threshold',\n  homeDomain: 'string',\n  inflationDest: 'address',\n  limit: 'amount',\n  lowThreshold: 'threshold',\n  masterWeight: 'weight',\n  maxTime: 'date',\n  medThreshold: 'threshold',\n  memo: 'memo',\n  minTime: 'date',\n  network: 'network',\n  offerId: 'string',\n  price: 'price',\n  name: 'string',\n  path: 'assetsArray',\n  selling: 'asset',\n  sendAsset: 'asset',\n  sendMax: 'amount',\n  setFlags: 'flags',\n  signer: 'signer',\n  source: 'address',\n  startingBalance: 'amount',\n  trustor: 'address',\n  value: 'string'\n}\n","'use strict'\n\n/**\n * Various independent helpers.\n *\n * @module\n */\n\n/**\n * Return a function that will execute `thunk` when called, and return the\n * result of its execution as a Promise. Handle async and regular functions\n * equally. Any error will be carried to .catch.\n *\n * @param {function} thunk A parameterless function\n * @return {function}\n */\nexport function delay (thunk) {\n  let firstCall = true\n  let memoized\n  return function () {\n    if (firstCall) {\n      firstCall = false\n      memoized = new Promise((resolve) => resolve(thunk()))\n    }\n    return memoized\n  }\n}\n\n/**\n * Return a promise that takes `x` seconds to resolve\n *\n * @param {number} x Time to wait\n * @return {Promise}\n */\nexport function timeout (x) {\n  return new Promise(function (resolve) { setTimeout(resolve, x) })\n}\n\n/**\n * Return `string` with first letter capitalized.\n *\n * @param {string} string\n * @return {string}\n */\nexport function capitalize (string) {\n  return string.substr(0, 1).toUpperCase() + string.slice(1)\n}\n\n/**\n * Return shortified `string` if longer than 30 characters; else return\n * `string`.\n *\n * @param {string}\n * @return {string}\n */\nexport function shorter (string) {\n  if (string.length > 30) {\n    return string.substr(0, 5) + '...' + string.substr(-5)\n  } else {\n    return string\n  }\n}\n","/**\n * Utilities to manipulate HTML element from javascript.\n *\n * Those may not be feature complete, as this library purpose is to ease\n * cosmic-lib and Stellar Authenticator development, rather than provide a\n * generic-case toolbox.\n *\n * @module\n */\n\n/**\n * Append `childs` as the end of `element`.\n *\n * @param {HTMLElement} element\n * @param {...(HTMLElement|String|Error)} childs\n */\nexport function append (element, ...childs) {\n  childs.forEach(child => {\n    if (typeof child === 'string' || child instanceof Error) {\n      element.appendChild(document.createTextNode(child))\n    } else {\n      element.appendChild(child)\n    }\n  })\n}\n\n/**\n * Add `newClass` as an additionnal class for `element`.\n *\n * @param {HTMLElement} element\n * @param {string} newClass\n * */\nexport function appendClass (element, newClass) {\n  element.className = element.className + ' ' + newClass\n}\n\n/**\n * Remove everything inside `element`.\n *\n * @param {HTMLElement} element\n * */\nexport function clear (element) {\n  element.innerHTML = ''\n}\n\n/**\n * Copy text inside `element`. `element` should be a textbox like textarea or\n * text input.\n *\n * @param {HTMLElement} element\n * @param\n * */\nexport function copyContent (element) {\n  element.select()\n  document.execCommand('copy')\n}\n\n/**\n * Return a newly created HTML element whose tag is `name`, attributes\n * `attributes` and childs `childs`.\n *\n * @param {string} name\n * @param {object|string} [attributes|className|ID]\n * @param {...HTMLElement} [childs]\n */\nexport function create (name, attributes, ...childs) {\n  if (!name) throw new Error('Missing tag name')\n\n  const element = document.createElement(name)\n\n  if (typeof attributes === 'string') {\n    switch (attributes.substr(0, 1)) {\n      case '#': element.id = attributes.subtstr(1); break\n      case '.': element.className = attributes.substr(1); break\n      default: throw new Error('Unhandled attribute')\n    }\n  } else {\n    let field; for (field in attributes) {\n      element[field] = attributes[field]\n    }\n  }\n\n  if (childs.length > 0) append(element, ...childs)\n\n  return element\n}\n\n/**\n * Destroy `element`.\n *\n * @param {HTMLElement} element\n * */\nexport function destroy (element) {\n  try {\n    element.parentNode.removeChild(element)\n  } catch (e) { console.log(e) }\n}\n\n/**\n * Return the first element matching `pattern`.\n * If `name` starts with `#`, it will match against IDs.\n * If `name` starts with `.`, it will match against classes.\n * If `name` is a plain word, it will match against tags.\n * If `parent` is given, it will look recursively in `parent` childs.\n *\n * @param {string} pattern\n * @param {HTMLElement} [parent=document]\n * */\nexport function grab (pattern, parent = document) {\n  switch (pattern.substr(0, 1)) {\n    case '#':\n      return parent.getElementById(pattern.substr(1))\n    case '.':\n      return parent.getElementsByClassName(pattern.substr(1))[0]\n    default:\n      return parent.getElementsByTagName(pattern)[0]\n  }\n}\n\n/**\n * Set the content of element to ...childs. Any previous content will be erased.\n *\n * @param {HTMLElement} element\n * @param {...HTMLElement} childs\n */\nexport function rewrite (element, ...childs) {\n  clear(element)\n  append(element, ...childs)\n}\n","'use strict'\n\nimport {shorter, timeout} from './helpers'\nimport * as status from './status'\n\n/**\n * Contains functions that probe the blockchain or federation servers to collect\n * datas.\n *\n * @module\n */\n\n/**\n * Select the network to be used by `StellarSdk` as being `cosmicLink` current\n * network.\n *\n * @param {CL}\n */\nexport function selectNetwork (cosmicLink) {\n  switch (cosmicLink.network) {\n    case 'test':\n      StellarSdk.Network.useTestNetwork()\n      break\n    case 'public':\n      StellarSdk.Network.usePublicNetwork()\n      break\n    default: throw new Error('Invalid network: ' + cosmicLink.network)\n  }\n}\n\n/**\n * Configure for how much time the resolved addresses are kept in cache,\n * in seconds. The default is set to 5 minutes to avoid resolving to an outdated\n * address.\n *\n * @const\n */\nexport let accountCacheExpiration = 5 * 60\n\n/**\n * Contains promise of previously fetched accounts.\n *\n * @private\n * @type {Object}\n */\nconst _accountCache = {}\n\n/**\n * Cache `promise` resolving to `address`'s account for `accountCacheExpiration`\n * seconds.\n *\n * @private\n * @param {string} address\n * @param {Promise} promise\n */\nasync function _cacheAccount (address, promise) {\n  _accountCache[address] = promise\n  await timeout(accountCacheExpiration * 1000)\n  delete _accountCache[address]\n}\n\n/**\n * Return a promise that resolve to `address` account object, as defined in\n * JavaScript Stellar SDK API reference. `address` can be either a Stellar public\n * key or a federated address (account*example.org).\n * Returned results are cached and re-usable.\n *\n * In case of error, change `cosmicLink` status accordingly.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} address\n * @return {Promise} Resolve to `address` account object\n */\nexport function address (cosmicLink, address) {\n  if (_accountCache[address]) return _accountCache[address]\n  const promise = _resolveAddress(cosmicLink, address)\n  _cacheAccount(address, promise)\n  return promise\n}\n\n/**\n * Helper for the previous resolve.address function.\n * Resolve to an account object for `address` or write error/status in\n * `cosmicLink`.\n *\n * @private\n * @param {cosmicLink} cosmicLink\n * @param {string} address\n */\nasync function _resolveAddress (cosmicLink, address) {\n  if (address.length !== 56 && !address.match(/.*\\*.*\\..*/)) {\n    status.fail(cosmicLink, 'Invalid address(es)')\n    status.error(cosmicLink, 'Invalid address: ' + shorter(address), 'throw')\n  }\n\n  try {\n    const account = await StellarSdk.FederationServer.resolve(address)\n    if (!account.account_id) throw new Error('Empty account')\n    return account\n  } catch (error) {\n    console.log(error)\n    status.fail(cosmicLink, 'Unresolved address(es)')\n    status.error(cosmicLink, \"Can't resolve: \" + shorter(address), 'throw')\n  }\n}\n","'use strict'\n\nimport * as node from './node'\n\n/**\n * Contains the methods to trigger and handle events.\n *\n * @module\n */\n\n/**\n * Call handler (in any) defined for `type` in `cosmicLink`. Call it with\n * arguments `cosmicLink`, `value`, `element`; Where `element` is the clicked\n * HTML element and `value` the field value it represents.\n *\n * @param {CL}\n * @param {string} Type The type of `object` as defined in specs.js\n * @param {*}  value Field value in `transaction descriptor` format\n * @param {HTMLElement} element HTML element displaying `value`\n * @return *\n */\nexport function handle (cosmicLink, type, value, element) {\n  if (!cosmicLink || !cosmicLink.onClick) return\n  const handler = cosmicLink.onClick[type]\n  if (handler) return handler(cosmicLink, value, element)\n}\n\nexport function trigger (cosmicLink, type, value, element) {\n  return () => handle(cosmicLink, type, value, element)\n}\n\n/**\n * Default handlers for address and asset onclick events.\n *\n * @namespace\n */\nexport const defaultHandler = {}\n\ndefaultHandler.address = function address (cosmicLink, account) {\n  let message = ''\n  for (let field in account) {\n    message += field + ':\\n' + account[field] + '\\n\\n'\n  }\n  window.alert(message)\n}\n\ndefaultHandler.asset = function (cosmicLink, asset, element) {\n  const issuerNode = node.grab('.CL_assetIssuer', element)\n  if (issuerNode.style.display === 'inline') issuerNode.style.display = 'none'\n  else issuerNode.style.display = 'inline'\n}\n\n// TODO: implement a complete event handling interface.\n// Possible structure for an event object.\n// ~ {\n// ~ type: 'onClick'\n// ~ node: HTMLElement,\n// ~ operation: 0|undefined,\n// ~ field: 'address',\n// ~ value: 'GAWO...',\n// ~ }\n//\n// event.trigger(cosmicLink, eventType, [operation], [field], [value], [node], [add])\n// event.listen(cosmicLink, eventType, handler))\n","'use strict'\n\nimport {shorter} from './helpers'\n\nimport * as specs from './specs'\nimport * as status from './status'\nimport * as decode from './decode'\nimport * as resolve from './resolve'\nimport * as prepare from './prepare'\nimport * as encode from './encode'\n\n/**\n * Contains the methods to convert transactions between various formats.\n *\n * @module\n */\n\n/** ****************************    URI -> XDR    ******************************/\n\n/**\n * Extract the query string from `uri`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} uri\n * @return {string} query\n */\n\nexport function uriToQuery (cosmicLink, uri) {\n  if (!uri.match(/\\?/)) return null\n  const query = uri.replace(/^[^?]*/, '')\n  return query\n}\n\n/**\n * Build a `transaction descriptor` object from a cosmic link `query`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} query\n * @return {Object} tdesc\n */\nexport function queryToJson (cosmicLink, query) {\n  if (query.length < 2) status.fail(cosmicLink, 'Empty query', 'throw')\n\n  /// Transaction descriptor.\n  const tdesc = {}\n  /// Operation descriptor.\n  const odesc = {}\n  const operation = query.substr(1).replace(/&.*/, '')\n  let isValid = true\n\n  if (!_isOperationTypeValid(operation)) {\n    status.error(cosmicLink, 'Unknow operation: ' + operation)\n    status.fail(cosmicLink, 'Invalid query', 'throw')\n  }\n\n  const queries = query.substr(operation.length + 2).split('&')\n  for (let index in queries) {\n    const argument = queries[index]\n    let temp = argument.split('=')\n    let field = temp[0], value = temp[1]\n\n    try {\n      if (!field) continue\n      if (!value && field !== 'homeDomain') {\n        value = '(empty)'\n        status.error(cosmicLink, 'No value for ' + field, 'throw')\n      }\n\n      let decodedValue = decode.fieldValue(cosmicLink, field, value)\n      if (_isTransactionField(field)) tdesc[field] = decodedValue\n      else odesc[field] = decodedValue\n    } catch (error) {\n      /// At this point decoding errors should already be handled.\n      /// This line catch program error for debugging purpose.\n      if (!cosmicLink.errors) status.error(cosmicLink, error)\n      isValid = false\n      const errorObject = { error: error, value: value }\n      if (_isTransactionField(field)) tdesc[field] = errorObject\n      else odesc[field] = errorObject\n    }\n  }\n\n  const native = StellarSdk.Asset.native()\n  switch (operation) {\n    case 'allowTrust':\n      if (odesc.authorize === undefined) odesc.authorize = true\n      break\n    case 'createPassiveOffer':\n    case 'manageOffer': {\n      if (odesc.buying && !odesc.selling) odesc.selling = native\n      if (odesc.selling && !odesc.buying) odesc.buying = native\n      break\n    }\n    case 'manageData':\n      if (!odesc.value) odesc.value = null\n      break\n    case 'pathPayment':\n      if (odesc.destAsset && !odesc.sendAsset) odesc.sendAsset = native\n      if (odesc.sendAsset && !odesc.destAsset) odesc.destAsset = native\n      break\n    case 'payment':\n      if (!odesc.asset) odesc.asset = native\n      break\n  }\n\n  const mandatoryFields = specs.operationMandatoryFields[operation]\n  mandatoryFields.forEach(field => {\n    if (odesc[field] === undefined) {\n      isValid = false\n      status.error(cosmicLink, 'Missing mandatory field: ' + field)\n    }\n  })\n  for (let field in odesc) {\n    if (!_isOperationField(operation, field)) {\n      isValid = false\n      status.error(cosmicLink, 'Invalid field: ' + field)\n    }\n  }\n\n  tdesc.operations = [ odesc ]\n  odesc.type = operation\n  if (!isValid) status.fail(cosmicLink, 'Invalid query')\n  return tdescToJson(cosmicLink, tdesc)\n}\n\n/**\n * Returns `true` if `operation` is a valid operation type, `false` otherwise.\n *\n * @private\n * @param {string} string\n * @return {boolean}\n */\nfunction _isOperationTypeValid (string) {\n  if (specs.operationMandatoryFields[string]) return true\n  else return false\n}\n\n/**\n * Returns `true` if `string` is a valid transaction field, `false` otherwise.\n *\n * @private\n * @param {string} string\n * @return {boolean}\n */\nfunction _isTransactionField (string) {\n  if (specs.transactionOptionalFields.indexOf(string) !== -1) return true\n  else return false\n}\n\n/**\n * Returns `true` if `string` is a valid field for `operation`, `false`\n * otherwise.\n *\n * @private\n * @param {string} operation\n * @param {string} string\n * @return {boolean}\n */\nfunction _isOperationField (operation, string) {\n  if (\n    specs.operationMandatoryFields[operation].indexOf(string) === -1 &&\n    specs.operationOptionalFields[operation].indexOf(string) === -1\n  ) return false\n  else return true\n}\n\n/**\n * Returns the JSON of cosmic link `transaction descriptor`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {Object} tdesc transaction descriptor\n * @return {string} transaction descriptor JSON\n */\nexport function tdescToJson (cosmicLink, tdesc) {\n  return JSON.stringify(tdesc, null, 2)\n}\n\n/**\n * Returns the Stellar `transaction` object for `cosmicLink`'s\n * `transaction descriptor`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {Object} tdesc transaction descriptor\n * @return {Transaction}\n */\nexport async function jsonToTransaction (cosmicLink, json) {\n  if (cosmicLink.errors) {\n    throw new Error(\"Can't build transaction from invalid cosmic link.\")\n  }\n\n  const tdesc = jsonToTdesc(cosmicLink, json)\n  if (cosmicLink.status) throw cosmicLink.status\n\n  if (!tdesc.source) {\n    if (cosmicLink.user) tdesc.source = cosmicLink.user\n    else status.fail(cosmicLink, 'Missing user/source account', 'throw')\n  }\n\n  if (!cosmicLink.server) status.fail(cosmicLink, 'No server defined', 'throw')\n\n  try {\n    resolve.selectNetwork(cosmicLink)\n    const builder = await _makeTransactionBuilder(cosmicLink, tdesc)\n    const operation = await _odescToOperation(cosmicLink, tdesc.operations[0])\n    builder.addOperation(operation)\n    return builder.build()\n  } catch (error) {\n    if (!cosmicLink.errors) status.error(cosmicLink, error)\n    if (!cosmicLink.status) status.fail(cosmicLink, \"Can't build transaction\", 'throw')\n  }\n}\n\n/**\n * Returns an Operation object equivalent to cosmic link `operation descriptor`.\n *\n * @private\n * @param {CL}\n * @param {Object} odesc Operation descriptor\n * @return {Operation}\n */\nasync function _odescToOperation (cosmicLink, odesc) {\n  let operation = odesc.type\n  delete odesc.type\n\n  for (let field in odesc) {\n    const value = await prepare.fieldValue(cosmicLink, field, odesc[field])\n    odesc[field] = value\n  }\n\n  return StellarSdk.Operation[operation](odesc)\n}\n\n/**\n * Returns a TransactionBuilder for `transaction descriptor`.\n *\n * @private\n * @param {CL}\n * @param {Object} tdesc Transaction descriptor\n * @return {TransactionBuilder}\n */\nasync function _makeTransactionBuilder (cosmicLink, tdesc) {\n  let opts = {}\n  if (tdesc.fee) opts.fee = tdesc.fee\n  if (tdesc.memo) opts.memo = prepare.memo(cosmicLink, tdesc.memo)\n  if (tdesc.minTime || tdesc.maxTime) {\n    opts.timebounds = { minTime: 0, maxTime: 0 }\n    if (tdesc.minTime) opts.timebounds.minTime = tdesc.minTime\n    if (tdesc.maxTime) opts.timebounds.maxTime = tdesc.maxTime\n  }\n\n  const loadedAccount = await _loadAccount(cosmicLink, tdesc.source)\n  const builder = new StellarSdk.TransactionBuilder(loadedAccount, opts)\n\n  /// Check if memo is needed for destination account.\n  const operation = tdesc.operations[0]\n  if (operation.destination) {\n    const account = await resolve.address(cosmicLink, operation.destination)\n    if (account.memo) {\n      const memoType = account.memo_type\n      const memoValue = account.memo\n      if (tdesc.memo && (tdesc.memo.type !== memoType || tdesc.memo.value !== memoValue)) {\n        status.error(cosmicLink, 'Memo conflict', 'throw')\n      } else {\n        builder.addMemo(new StellarSdk.Memo(memoType, memoValue))\n      }\n    }\n  }\n\n  return builder\n}\n\nasync function _loadAccount (cosmicLink, address) {\n  const publicKey = await prepare.address(cosmicLink, address)\n  try {\n    return await cosmicLink.server.loadAccount(publicKey)\n  } catch (error) {\n    console.log(error)\n    status.error(cosmicLink, \"Can't find account source on current network: \" + shorter(publicKey), 'throw')\n  }\n}\n\n/**\n * Return the XDR of `transaction`.\n *\n * @param {CL}\n * @param {Transaction} transaction\n * @return {XDR}\n */\nexport function transactionToXdr (cosmicLink, transaction) {\n  return transaction.toEnvelope().toXDR('base64')\n}\n\n/** ****************************    XDR -> URI    ******************************/\n\n/**\n * Return the Transaction object equivalent to `xdr`.\n *\n * @param {CL}\n * @param {XDR} xdr\n * @return {Transaction}\n */\nexport function xdrToTransaction (cosmicLink, xdr) {\n  return new StellarSdk.Transaction(xdr)\n}\n\n/**\n * Return the `transaction descriptor` JSON equivalent to Stellar `Transaction`\n * object.\n *\n * Set options.stripSource to true for a transaction that is account-agnostic,\n * like an exchange operation for example. Ignore it for a transaction that\n * is required to be performed from the source account defined in 'XDR'\n * (example: subscription monthly fee).\n *\n * You may set options.network to the desired network.\n *\n * @param {CL}\n * @param {Transaction} transaction\n * @param {Object} options\n * @return {JSON} transaction descriptor JSON\n */\nexport function transactionToJson (cosmicLink, transaction, options = {}) {\n  const copy = JSON.parse(JSON.stringify(transaction))\n\n  if (copy.operations.length > 1) {\n    status.error(cosmicLink, \"Can't parse multi-operation transactions yet.\")\n    status.fail(cosmicLink, 'Unhandled transaction', 'throw')\n  }\n  if (copy.signatures.length > 0) {\n    status.error(cosmicLink, \"Can't handle multi-signature yet.\")\n    status.fail(cosmicLink, 'Unhandled transaction', 'throw')\n  }\n\n  delete copy.tx\n  delete copy.sequence\n  delete copy.signatures\n\n  if (!cosmicLink.user) cosmicLink.user = copy.source\n  if (options.stripSource) delete copy.source\n\n  if (copy.fee === 100) delete copy.fee\n  if (copy._memo._switch.name !== 'memoNone') {\n    copy.memo = {}\n    copy.memo.type = copy._memo._arm\n    if (copy.memo.type === 'hash' || copy.memo.type === 'retHash') {\n      copy.memo.value = transaction._memo._value.toString('hex')\n      if (copy.memo.type === 'retHash') copy.memo.type = 'return'\n    } else {\n      copy.memo.value = transaction._memo._value.toString()\n    }\n  }\n  delete copy._memo\n\n  if (copy.timeBounds) {\n    if (copy.timeBounds.minTime && copy.timeBounds.minTime !== '0') {\n      copy.minTime = copy.timeBounds.minTime\n    }\n    if (copy.timeBounds.maxTime && copy.timeBounds.maxTime !== '0') {\n      copy.maxTime = copy.timeBounds.maxTime\n    }\n    delete copy.timeBounds\n  }\n\n  var operation = copy.operations[0]\n  if (operation.limit === '922337203685.4775807') delete operation.limit\n  if (operation.value) {\n    operation.value = transaction.operations[0].value.toString()\n  }\n  if (operation.offerId === '0') delete operation.offerId\n  if (operation.path && operation.path.length === 0) delete operation.path\n  if (operation.line) {\n    operation.asset = operation.line\n    delete operation.line\n  }\n  if (operation.signer) {\n    if (operation.signer.ed25519PublicKey) {\n      operation.signer.type = 'key'\n      operation.signer.value = operation.signer.ed25519PublicKey\n      delete operation.signer.ed25519PublicKey\n    } else if (operation.signer.sha256Hash) {\n      operation.signer.type = 'hash'\n      operation.signer.value = transaction.operations[0].signer.sha256Hash.toString('hex')\n      delete operation.signer.sha256Hash\n    } else if (operation.signer.preAuthTx) {\n      operation.signer.type = 'tx'\n      operation.signer.value = transaction.operations[0].signer.preAuthTx.toString('hex')\n      delete operation.signer.preAuthTx\n    }\n  }\n\n  if (options.network !== undefined) copy.network = options.network\n\n  return JSON.stringify(copy, null, 2)\n}\n\n/**\n * Parse `transaction descriptor` from `JSON`.\n *\n * @param {CL}\n * @param {JSON} JSON transaction descriptior\n * @return {Object} transaction descriptor\n */\nexport function jsonToTdesc (cosmicLink, json) {\n  return JSON.parse(json)\n}\n\n/**\n * Return the cosmic link query equivalent to `transaction descriptor`.\n *\n * @param {CL}\n * @param {Object} tdesc Transaction descriptor\n * @return {string} query\n */\nexport function jsonToQuery (cosmicLink, json) {\n  const tdesc = jsonToTdesc(cosmicLink, json)\n  const operation = tdesc.operations[0].type\n  let query = '?' + operation\n\n  specs.transactionOptionalFields.forEach(field => {\n    if (tdesc[field] !== undefined) {\n      query = query + encode.field(cosmicLink, field, tdesc[field])\n    }\n  })\n\n  const odesc = tdesc.operations[0]\n  const operationFields = specs.operationMandatoryFields[operation]\n    .concat(specs.operationOptionalFields[operation])\n\n  operationFields.forEach(field => {\n    if (odesc[field] !== undefined) {\n      query = query + encode.field(cosmicLink, field, odesc[field])\n    }\n  })\n  return query\n}\n\n/**\n * Return a complete cosmic link URI made of `query` and `cosmicLink.page`.\n * Use `https://cosmic.link/` if `cosmicLink.page` is undefined\n *\n * @param {CL}\n * @param {string} query\n * @param {string} cosmic link URI\n */\nexport function queryToUri (cosmicLink, query) {\n  return cosmicLink.page + query\n}\n","'use strict'\n\nimport * as node from './node'\nimport {shorter} from './helpers'\n\nimport * as specs from './specs'\nimport * as status from './status'\nimport * as resolve from './resolve'\nimport * as event from './event'\n\n/**\n * Contains methods to format a `transaction descriptor` into CSS/HTML for\n * display in browser.\n *\n * @module\n */\n\n/**\n * Populate `cosmicLink.transactionNode` with a description of `transaction\n * descriptor`.\n *\n * @param {CL}\n * @param {Object} tdesc Transaction descriptor\n */\nexport function tdesc (cosmicLink, tdesc) {\n  const trNode = node.grab('.CL_transaction', cosmicLink.transactionNode)\n\n  let infoNode\n  specs.transactionOptionalFields.forEach(entry => {\n    if (tdesc[entry]) {\n      if (!infoNode) infoNode = node.create('ul', '.CL_sideInfo')\n      const lineNode = node.create('li', {},\n        _fieldDesc[entry] + ': ',\n        field(cosmicLink, entry, tdesc[entry])\n      )\n      node.append(infoNode, lineNode)\n    }\n  })\n\n  if (infoNode) node.append(trNode, infoNode)\n\n  try {\n    const opNode = _formatOdesc(cosmicLink, tdesc.operations[0])\n    node.append(trNode, opNode)\n  } catch (error) {\n    console.log(error)\n    status.error(cosmicLink, 'Unhandled formatting error')\n  }\n}\n\n/**\n * Transaction field meaning.\n * @private\n */\nconst _fieldDesc = {\n  source: 'Source',\n  fee: 'Fees',\n  minTime: 'Valid only after',\n  maxTime: 'Valid only before',\n  memo: 'Memo',\n\n  network: 'Network'\n}\n\n/**\n * Return an HTMLElement with `operation descriptor` in human language.\n *\n * @private\n * @param {CL}\n * @param {Object} odesc Operation Descriptor\n */\nfunction _formatOdesc (cosmicLink, odesc) {\n  const opNode = node.create('div', '.CL_operation')\n  let meaning = _odescToMeaning(odesc)\n\n  while (meaning) {\n    if (meaning.substr(0, 1) === '{') {\n      const query = meaning.substr(1).replace(/}.*/, '')\n      meaning = meaning.replace(/^[^}]*}/, '')\n      if (query === 'newline') {\n        if (meaning === '') break\n        node.append(opNode, node.create('br'))\n      } else {\n        const fieldNode = field(cosmicLink, query, odesc[query])\n        node.append(opNode, fieldNode)\n      }\n    } else {\n      const txt = meaning.replace(/{.*/, '')\n      meaning = meaning.replace(/^[^{]*/, '')\n      node.append(opNode, txt)\n    }\n  }\n  return opNode\n}\n\n/**\n * Return a string that describe the meaning of `operation descriptor`.\n *\n * @private\n * @param {Object} odesc Operation descriptor\n * @return {string} Meaning of `operation descriptor`\n */\nfunction _odescToMeaning (odesc) {\n  let msg\n  switch (odesc.type) {\n    case 'accountMerge':\n      return 'Merge account inside {destination}'\n    case 'allowTrust':\n      if (odesc.authorize) {\n        return 'Allow usage of your asset {assetCode} to {trustor}'\n      } else {\n        return 'Deny usage of your asset {assetCode} to {trustor}'\n      }\n    case 'changeTrust':\n      if (odesc.limit === '0') {\n        return 'Refuse asset {asset}'\n      } else if (odesc.limit) {\n        return 'Set holding limit as {limit} for asset {asset}'\n      } else {\n        return 'Accept asset {asset}'\n      }\n    case 'createAccount':\n      return 'Create account {destination} and send it {startingBalance} XLM'\n    case 'createPassiveOffer':\n      return 'Passive offer of {amount} {selling} at {price} {buying} / unit'\n    case 'inflation':\n      return 'Run inflation'\n    case 'manageData':\n      if (odesc.value) {\n        return \"Set data entry '{name}' as '{value}'\"\n      } else {\n        return \"Delete data entry '{name}'\"\n      }\n    case 'manageOffer':\n      if (!odesc.offerId || odesc.offerId === '0') {\n        return 'Offer {amount} {selling} at {price} {buying} / unit'\n      } else if (odesc.amount !== '0') {\n        return \"Change offer '{offerId}' to: offer {amount} {selling} at \" +\n          '{price} {buying} / unit'\n      } else {\n        return \"Delete offer '{offerId}'\"\n      }\n    case 'pathPayment':\n      msg = 'Send {destAmount} {destAsset} to {destination} for a maximum ' +\n        'of {sendMax} {sendAsset}'\n      if (odesc.path) msg += ' using conversion path: {path}'\n      return msg\n    case 'payment':\n      return 'Send {amount} {asset} to {destination}'\n    case 'setOptions':\n      msg = ''\n      if (odesc.inflationDest) {\n        msg += 'Set inflation destination to: {inflationDest}{newline}'\n      }\n      if (odesc.clearFlags) msg += 'Clear flag(s): {clearFlags}{newline}'\n      if (odesc.setFlags) msg += 'Set flag(s): {setFlags}{newline}'\n      if (odesc.masterWeight) {\n        if (odesc.masterWeight === '0') {\n          msg += 'Delete master key{newline}'\n        } else {\n          msg += 'Set master key weight at: {masterWeight}{newline}'\n        }\n      }\n      ['lowThreshold', 'medThreshold', 'highTreshold'].forEach(field => {\n        if (odesc[field]) msg += 'Set ' + field + ' at: {' + field + '}{newline}'\n      })\n      if (odesc.signer) {\n        if (odesc.signer.weight === '0') msg += 'Remove signer: {signer}{newline}'\n        else msg += 'Set signer: {signer}{newline}'\n      }\n      if (odesc.homeDomain) msg += 'Set home domain: {homeDomain}{newline}'\n      if (odesc.homeDomain === '') msg += 'Unset home domain'\n      if (!msg) msg = 'Do nothing'\n      return msg\n    default:\n      throw new Error('Unknow operation: ' + odesc.type)\n  }\n}\n\n/**\n * Return an HTML element exposing `value`.\n *\n * @param {CL}\n * @param {string} field The field name of `value` as defined in `spec.js`\n * @return {HTLMElement} `value` formatted in HTML/CSS\n */\nexport function field (cosmicLink, field, value) {\n  let type = specs.fieldType[field]\n  if (!type) throw new Error('Unknow field: ' + field)\n\n  if (typeof value === 'object' && value.error) type = 'error'\n\n  const formatter = _format[type] || _format.string\n  const fieldNode = formatter(cosmicLink, value)\n\n  fieldNode.className = 'CL_' + type\n  fieldNode.onClick = event.trigger(cosmicLink, type, value, fieldNode)\n  return fieldNode\n}\n\n/******************************************************************************/\n\nlet _format = {}\n\n_format.string = function (cosmicLink, string) {\n  return document.createTextNode(string)\n}\n\n_format.error = function (cosmicLink, error) {\n  const errorNode = node.create('span', '.CL_error', error.value)\n  errorNode.title = 'Invalid value'\n  return errorNode\n}\n\n_format.address = function (cosmicLink, address) {\n  const addressNode = node.create('span',\n    { title: 'Resolving...', className: 'CL_address' },\n    shorter(address),\n    node.create('span', '.CL_loadingAnim')\n  )\n\n  _resolveAddressAndUpdate(cosmicLink, address, addressNode)\n  return addressNode\n}\n\nasync function _resolveAddressAndUpdate (cosmicLink, address, addressNode) {\n  try {\n    const account = await resolve.address(cosmicLink, address)\n\n    addressNode.title = account.account_id\n    if (account.memo) {\n      addressNode.title += `\\nMemo (${account.memo_format}): ${account.memo}`\n    }\n\n    addressNode.onclick = event.trigger(cosmicLink, 'address', account,\n      addressNode)\n  } catch (error) {\n    console.log(error)\n    addressNode.title = \"Can't resolve address\"\n    node.appendClass(addressNode, 'CL_error')\n\n    const parent = addressNode.parentNode\n    if (parent.className === 'CL_assetIssuer') {\n      parent.style.display = 'inline'\n    }\n  }\n\n  node.destroy(node.grab('.CL_loadingAnim', addressNode))\n  const grandpa = addressNode.parentNode.parentNode\n  if (grandpa.className === 'CL_asset') {\n    node.destroy(node.grab('.CL_loadingAnim', grandpa))\n  }\n}\n\n_format.asset = function (cosmicLink, asset) {\n  const codeNode = node.create('span', '.CL_assetCode', asset.code)\n  const issuerNode = node.create('span', '.CL_assetIssuer')\n  const assetNode = node.create('span', '.CL_asset', codeNode, issuerNode)\n\n  codeNode.onclick = event.trigger(cosmicLink, 'asset', asset, assetNode)\n\n  if (asset.issuer) {\n    codeNode.title = 'Issued by ' + asset.issuer\n    node.append(issuerNode, ' issued by ')\n    node.append(issuerNode, _format.address(cosmicLink, asset.issuer))\n    node.append(codeNode, node.create('span', '.CL_loadingAnim'))\n  } else {\n    codeNode.title = 'Native asset'\n    node.append(issuerNode, ' native asset')\n  }\n\n  return assetNode\n}\n\n_format.assetsArray = function (cosmicLink, assetsArray) {\n  const assetsArrayNode = node.create('span')\n  for (let i = 0; i < assetsArray.length; i++) {\n    if (i !== 0) node.append(assetsArrayNode, ', ')\n    node.append(assetsArrayNode, _format.asset(cosmicLink, assetsArray[i]))\n  }\n\n  return assetsArrayNode\n}\n\n_format.date = function (cosmicLink, timestamp) {\n  const date = new Date(timestamp * 1000)\n  return node.create('span', {}, date.toLocaleString())\n}\n\n_format.flags = function (cosmicLink, flags) {\n  let string = ''\n  if (flags >= 4) {\n    string = 'immutable'\n    flags = flags - 4\n  }\n  if (flags >= 2) {\n    if (string) string = ', ' + string\n    string = 'revocable' + string\n    flags = flags - 2\n  }\n  if (flags === 1) {\n    if (string) string = ', ' + string\n    string = 'required' + string\n  }\n\n  return node.create('span', {}, string)\n}\n\n_format.memo = function (cosmicLink, memo) {\n  const typeNode = node.create('span', '.CL_memoType', memo.type)\n  let valueNode\n  if (memo.value.length > 30) {\n    valueNode = _makeHashNode(memo.value)\n    node.appendClass(valueNode, '.CL_memoValue')\n  } else {\n    valueNode = node.create('span', '.CL_memoValue', memo.value)\n  }\n  return node.create('span', {}, '(', typeNode, ') ', valueNode)\n}\n\n_format.price = function (cosmicLink, price) {\n  if (typeof price === 'string') {\n    return node.create('span', {}, price)\n  } else {\n    return node.create('span', {}, price.n / price.d + '')\n  }\n}\n\n_format.signer = function (cosmicLink, signer) {\n  const signerNode = node.create('span')\n  switch (signer.type) {\n    case 'key':\n      node.append(signerNode, 'Account ')\n      node.append(signerNode, _format.address(cosmicLink, signer.value))\n      break\n    case 'hash':\n      node.append(signerNode,\n        'Key whose hash is ',\n        _makeHashNode(signer.value)\n      )\n      break\n    case 'tx':\n      node.append(signerNode,\n        'Transaction whose hash is ',\n        _makeHashNode(signer.value)\n      )\n  }\n  if (signer.weight !== '0') {\n    node.append(signerNode, ' with a weight of ' + signer.weight)\n  }\n  return signerNode\n}\n\nfunction _makeHashNode (hash) {\n  return node.create('span',\n    { className: 'CL_hash', title: hash, onclick: _copier(hash) },\n    shorter(hash)\n  )\n}\n\n/**\n * Return a function that copy `string` into user clipboard.\n *\n * @private\n * @param {string} string\n * @return {function}\n */\nfunction _copier (string) {\n  return function () {\n    const textBox = node.create('textarea', {}, string)\n    node.append(node.grab('body'), textBox)\n    node.copyContent(textBox)\n    node.destroy(textBox)\n  }\n}\n","'use strict'\n\nimport {capitalize, delay} from './helpers'\n\nimport * as convert from './convert'\nimport * as format from './format'\nimport * as status from './status'\n\n/**\n * Contains the methods to parse transactions in various format and create a\n * `CosmicLink` object out of them.\n *\n * Also contains methods to update some of the `CosmicLink` datas when it\n * require update/re-parse of part or totallity of the object.\n *\n * @module\n */\n\n/**\n * Set `page` as the base URI for `cosmicLink`. Update the URI getter\n * accordingly.\n */\nexport function setPage (cosmicLink, page) {\n  cosmicLink._page = encodeURI(page)\n  makeConverter(cosmicLink, 'query', 'uri')\n}\n\n/**\n * Set `cosmicLink` `network`. Throw an error if `network` is not valid.\n *\n * @param {CL}\n * @param {string} network Either `public` or `test`\n */\nexport function network (cosmicLink, network) {\n  cosmicLink._network = network\n  if (network === 'test') {\n    cosmicLink.server = new StellarSdk.Server('https://horizon-testnet.stellar.org')\n  } else if (network === 'public') {\n    cosmicLink.server = new StellarSdk.Server('https://horizon.stellar.org')\n  } else {\n    cosmicLink.server = null\n    status.error(cosmicLink, 'Invalid network: ' + network, 'throw')\n  }\n}\n\n/**\n * Setup the getters for each format form `cosmicLink`, using `value` and\n * `...options` as input. The six getters are:\n * * CosmicLink.getUri()\n * * CosmicLink.getQuery()\n * * CosmicLink.getTdesc()\n * * CosmicLink.getJson()\n * * CosmicLink.getTransaction()\n * * CosmicLink.getXdr()\n * Each format offers a way to represent the same transaction. This function\n * only setup the getters, which returns a promise resolving to the transaction\n * in the corresponding format. The conversion only occurs if/when the getter\n * is called.\n *\n * @param {CL}\n * @param {string|Object} value A transaction in on of the supported format\n * @param {Object} options The options as specified for CosmicLink constructor\n * @return {void}\n */\nexport function dispatch (cosmicLink, value, options) {\n  const type = _guessType(value)\n  const parser = typeParser[type]\n  if (parser) parser(cosmicLink, value, options)\n  else typeTowardAll(cosmicLink, type, value, options)\n  if (cosmicLink.transactionNode) {\n    cosmicLink.getTdesc().then(tdesc => format.tdesc(cosmicLink, tdesc))\n  }\n}\n\n/**\n * Returns `type` which is the format of transaction represented by `value`.\n *\n * @private\n * @param {string|Object} value Either a cosmic link, a query, a `transaction\n *     descriptor` formatted as object or JSON, a Stellar Transaction object or\n *     a Stellar transaction XDR.\n * @return {string} type Type of `value`\n */\nfunction _guessType (value) {\n  let type\n  if (typeof value === 'string') {\n    const query = convert.uriToQuery('', value)\n    if (query && query.substr(0, 5) === '?xdr=') type = 'xdrUri'\n    else if (value.substr(0, 1) === '?') type = 'query'\n    else if (value.substr(0, 1) === '{') type = 'json'\n    else if (value.match(/^[a-zA-Z0-9+-=/]+$/)) type = 'xdr'\n    else type = 'uri'\n  } else {\n    if (value.tx) type = 'transaction'\n    else type = 'tdesc'\n  }\n  return type\n}\n\n/**\n * Per-type customization of the generic parsing process.\n *\n * @private\n * @namespace\n */\nconst typeParser = {}\n\ntypeParser.uri = function (cosmicLink, uri) {\n  const page = uri.replace(/[?][^?]*$/, '')\n  const query = convert.uriToQuery(cosmicLink, uri)\n\n  cosmicLink._page = encodeURI(page)\n  typeTowardAll(cosmicLink, 'query', query)\n}\n\ntypeParser.xdrUri = function (cosmicLink, xdrUri) {\n  const page = xdrUri.split('?')[0]\n  if (page) cosmicLink._page = encodeURI(page)\n\n  const query = convert.uriToQuery(cosmicLink, xdrUri)\n  const temp = query.split('&')\n  const xdr = temp[0].substr(5)\n\n  let options = {}\n  temp.slice(1).forEach(entry => {\n    let field = entry.replace(/=.*$/, '')\n    let value = entry.substr(field.length + 1)\n\n    switch (field) {\n      case 'stripSource':\n        options.stripSource = true\n        break\n      case 'network':\n        if (!cosmicLink._network) cosmicLink._network = value\n        options.network = value\n        break\n      default:\n        status.fail(cosmicLink, 'Invalid query')\n        status.error(cosmicLink, 'Unknow option: ' + entry, 'throw')\n    }\n  })\n\n  let transaction\n  try {\n    transaction = new StellarSdk.Transaction(xdr)\n  } catch (error) {\n    console.log(error)\n    status.fail(cosmicLink, 'Invalid XDR', 'throw')\n  }\n\n  typeTowardAll(cosmicLink, 'transaction', transaction, options)\n  typeTowardAllUsingDelayed(cosmicLink, 'query', cosmicLink.getQuery)\n}\n\n/**\n * Setup all formats getters for `cosmicLink` using entry point `value`, which\n * is a transaction formatted in `type`.\n *\n * @param {CL}\n * @param {string} type One of 'uri', 'query', 'json', 'tdesc', 'transaction' or\n *                      'xdr'\n * @param {*} value The value for `type`\n */\nfunction typeTowardAll (cosmicLink, type, value, ...options) {\n  if (type === 'tdesc') {\n    type = 'json'\n    value = convert.tdescToJson(cosmicLink, value, ...options)\n  }\n\n  typeTowardAllUsingDelayed(cosmicLink, type, delay(() => value), ...options)\n}\n\n/**\n * Setup all formats getters for `cosmicLink` using entry point `delayed`. Here\n * we name `delayed` a function that returns a promise of the transaction\n * formatted in `type`.\n *\n * @param {CL}\n * @param {string} type One of 'uri', 'query', 'json', 'tdesc', 'transaction' or\n *                      'xdr'\n * @param {function} delayed A function that return a promise for `type`\n */\nfunction typeTowardAllUsingDelayed (cosmicLink, type, delayed, ...options) {\n  const getter = 'get' + capitalize(type)\n  cosmicLink[getter] = delayed\n\n  if (type !== 'xdr') typeTowardXdr(cosmicLink, type, ...options)\n  if (type !== 'uri') typeTowardUri(cosmicLink, type, ...options)\n  cosmicLink.getTdesc = async () => {\n    const json = await cosmicLink.getJson()\n    return convert.jsonToTdesc(cosmicLink, json)\n  }\n}\n\n/**\n * Setup format getters for `cosmicLink` starting from the one following `type`\n * until xdr. For example, if `type` is 'query', it will setup\n * `cosmicLink.getJson`, `cosmicLink.getTransaction` and `cosmicLink.getXdr`.\n *\n *\n * @param {CL}\n * @param {string} type One of 'uri', 'query', 'json', 'transaction'\n * @param {*} value The value of `type`\n */\nfunction typeTowardXdr (cosmicLink, type, ...options) {\n  switch (type) {\n    case 'uri': makeConverter(cosmicLink, 'uri', 'query', ...options)\n    case 'query': makeConverter(cosmicLink, 'query', 'json', ...options)\n    case 'json': makeConverter(cosmicLink, 'json', 'transaction', ...options)\n    case 'transaction': makeConverter(cosmicLink, 'transaction', 'xdr', ...options)\n      break\n    default: throw new Error('Invalid type: ' + type)\n  }\n}\n\n/**\n * Setup format getters for `cosmicLink` starting from the one following `type`\n * until xdr. For example, if `type` is 'json', it will setup\n * `cosmicLink.getQuery` and `cosmicLink.getUri`.\n *\n * @param {CL}\n * @param {string} type One of 'xdr', 'transaction', 'json', 'query'\n */\nfunction typeTowardUri (cosmicLink, type, ...options) {\n  switch (type) {\n    case 'xdr': makeConverter(cosmicLink, 'xdr', 'transaction', ...options)\n    case 'transaction': makeConverter(cosmicLink, 'transaction', 'json', ...options)\n    case 'json': makeConverter(cosmicLink, 'json', 'query', ...options)\n    case 'query': makeConverter(cosmicLink, 'query', 'uri', ...options)\n      break\n    default: throw new Error('Invalid type: ' + type)\n  }\n}\n\n/**\n * Setup format getter get`to` for `cosmicLink` using `from`. In other words,\n * if `from` is 'uri' and `to` is 'query', it will setup `cosmicLink.getQuery`\n * to be computed from uri.\n *\n * This function uses existing conversion functions in 'convert' module.\n * i.e.: arbitrary conversion like from query to transaction won't do.\n *\n * @param {CL}\n * @param {string} from One of 'uri', 'query', 'json', 'tdesc', 'transaction' or\n *                      'xdr'\n * @param {string} to One of 'uri', 'query', 'json', 'tdesc', 'transaction' or\n *                    'xdr'\n */\nfunction makeConverter (cosmicLink, from, to, ...options) {\n  const getFrom = 'get' + capitalize(from)\n  const getTo = 'get' + capitalize(to)\n  const converter = from + 'To' + capitalize(to)\n\n  const getter = cosmicLink[getFrom]\n  cosmicLink[getTo] = delay(async () => {\n    const value = await getter()\n    return convert[converter](cosmicLink, value, ...options)\n  })\n}\n","'use strict'\n\nimport * as specs from './specs'\n\n/**\n * Contains the methods to encode values formatted in `transaction descriptor`\n * format into URI format.\n *\n * @module\n */\n\nexport function field (cosmicLink, field, value) {\n  let result = value\n  const type = specs.fieldType[field]\n  if (type) {\n    const encoder = exports[type]\n    if (encoder) result = encoder(cosmicLink, value)\n  }\n  if (result === undefined) return ''\n  else return '&' + field + '=' + result\n}\n\n/******************************************************************************/\n\nexport function asset (cosmicLink, asset) {\n  if (asset.issuer) return asset.code + ':' + asset.issuer\n}\n\nexport function assetsArray (cosmicLink, assetsArray) {\n  let string = ''\n  assetsArray.forEach(entry => {\n    if (string) string = string + ','\n    string = string + asset(cosmicLink, entry)\n  })\n  return string\n}\n\nexport function boolean (cosmicLink, boolean) {\n  if (!boolean) return 'false'\n}\n\nexport function date (cosmicLink, timestamp) {\n  const date = new Date(timestamp * 1000)\n  const isoString = date.toISOString()\n    .replace(/\\.00.000/, '')\n    .replace(/\\.000/, '')\n    .replace(/T00:00:00Z/, '')\n  return isoString\n}\n\nexport function memo (cosmicLink, memo) {\n  return memo.type + ':' + memo.value\n}\n\nexport function signer (cosmicLink, signer) {\n  return signer.weight + ':' + signer.type + ':' + signer.value\n}\n","'use strict'\n\nimport * as specs from './specs'\nimport * as resolve from './resolve'\nimport * as status from './status'\n\n/**\n * Contains the methods to convert field values from CosmicLink's\n * `transaction descriptor` format to Stellar transaction object format.\n *\n * @module\n */\n\n/**\n * Prepare `value` accordingly to `field` type.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} field\n * @param {any} value\n */\nexport async function fieldValue (cosmicLink, field, value) {\n  const type = specs.fieldType[field]\n  if (type) return await typedValue(cosmicLink, type, value)\n  else status.error(cosmicLink, 'Unknow field: ' + field, 'throw')\n}\n\n/**\n * Prepare `value` using the preparing function for `type`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} type\n * @param {any} value\n */\nexport async function typedValue (cosmicLink, type, value) {\n  const preparer = exports[type]\n  if (preparer) return await preparer(cosmicLink, value)\n  else return value\n}\n\n/******************************************************************************/\n\n/**\n * Returns the `publicKey` for `address`.\n *\n * @param {CL}\n * @param {string} Address\n * @return {publicKey}\n */\nexport async function address (cosmicLink, address) {\n  const account = await resolve.address(cosmicLink, address)\n  return account.account_id\n}\n\n/**\n * Returns the Asset object equivalent to cosmic link `asset`.\n *\n * @param {CL}\n * @param {string} asset\n * @return {Asset}\n */\nexport async function asset (cosmicLink, asset) {\n  if (asset.issuer) {\n    const publicKey = await address(cosmicLink, asset.issuer)\n    return new StellarSdk.Asset(asset.code, publicKey)\n  } else {\n    return StellarSdk.Asset.native()\n  }\n}\n\n/**\n * Returns an array of Assets object equivalent to cosmic link `assetsArray`.\n *\n * @param {CL}\n * @param {Array.string} assetsArray\n * @return {Array.Asset}\n */\nexport async function assetsArray (cosmicLink, assetsArray) {\n  let path = []\n  for (let index in assetsArray) {\n    const string = assetsArray[index]\n    const preparedAsset = await asset(cosmicLink, string)\n    path.push(preparedAsset)\n  }\n  return path\n}\n\n/**\n * Returns a Stellar Memo equivalent to cosmic link `memo`.\n *\n * @param {CL}\n * @param {Object} memo { type: t, value: v}\n * @return {Memo}\n */\nexport function memo (cosmicLink, memo) {\n  return new StellarSdk.Memo(memo.type, memo.value)\n}\n\n/**\n * Return a Signer object equivalent to cosmic link `signer`,\n *\n * @param {CL}\n * @param {Object} signer { weigth: w, type: t, value: v }\n * @return {Signer}\n */\nexport async function signer (cosmicLink, signer) {\n  let preparedSigner = { weight: signer.weight }\n  switch (signer.type) {\n    case 'key':\n      const publicKey = await address(cosmicLink, signer.value)\n      preparedSigner.ed25519PublicKey = publicKey\n      break\n    case 'hash':\n      preparedSigner.sha256Hash = signer.value\n      break\n    case 'tx':\n      preparedSigner.preAuthTx = signer.value\n      break\n  }\n  return preparedSigner\n}\n","'use strict'\n\nimport * as status from './status'\nimport * as specs from './specs'\n\n/**\n * Provide checks for varous type of field used in cosmic links. In case of\n * error, `cosmicLink` is updated accordingly.\n *\n * This module may no be type-complete and new type checks got added only when\n * needed.\n *\n * The check apply on values using the cosmic link JSON format.\n *\n * @module\n */\n\n/**\n * Generic check for numbers. Check that `value` is a number or a string\n * representing a number. `type` is for the customization of the message in case\n * of error. `min` and `max` may be provided as additional restriction for\n * `value`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {number|string} value\n * @param {string} [type = 'number']\n * @param {number|string} [min]\n * @param {number|string} [max]\n */\nexport function number (cosmicLink, value, type = 'number', min, max) {\n  const num = +value\n  if (isNaN(num)) {\n    status.error(cosmicLink, 'Invalid ' + type + ' (should be a number): ' +\n        value, 'throw')\n  } else if ((min && num < min) || (max && num > max)) {\n    status.error(cosmicLink, 'Invalid ' + type +\n      ' (should be between ' + min + ' and ' + max + ' ): ' + value, 'throw')\n  }\n}\n\n/**\n * Check that `value` respect the cosmic link JSON format for `field`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} field\n * @param {string} value\n */\nexport function fieldValue (cosmicLink, field, value) {\n  const type = specs.fieldType[field]\n  if (type) typedValue(cosmicLink, type, value)\n  else status.error(cosmicLink, 'Unknow field: ' + field, 'throw')\n}\n\n/**\n * Check that `value` respect the cosmic link JSON format for `type`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} type\n * @param {string} value\n */\nexport function typedValue (cosmicLink, type, value) {\n  const checker = exports[type]\n  if (checker) checker(cosmicLink, value)\n}\n\n/******************************************************************************/\n\n/**\n * @param {cosmicLink} cosmicLink\n * @param {object} asset\n */\nexport function asset (cosmicLink, asset) {\n  const code = asset.code.toLowerCase()\n  if (!asset.issuer && code !== 'xlm' && code !== 'native') {\n    status.error(cosmicLink, 'Missing issuer for asset: ' + code, 'throw')\n  }\n}\n\n/**\n * @param {cosmicLink} cosmicLink\n * @param {string|number} amount\n */\nexport function amount (cosmicLink, amount) {\n  number(cosmicLink, amount, 'amount')\n}\n\n/**\n * @param {cosmicLink} cosmicLink\n * @param {object} signer\n */\nexport function signer (cosmicLink, signer) {\n  number(cosmicLink, signer.weight, 'weight', 0, 255)\n  switch (signer.type) {\n    case 'key': break\n    case 'hash':\n    case 'tx':\n      if (signer.value.length !== 64 || !signer.value.match(/[0-9a-f]*/)) {\n        status.error(cosmicLink, 'Invalid hash (expecting sha256sum)', 'throw')\n      }\n      break\n    default:\n      status.error(cosmicLink, 'Invalid signer type: ' + signer.type, 'throw')\n  }\n}\n\n/**\n * @param {cosmicLink} cosmicLink\n * @param {string|number} threshold\n */\nexport function threshold (cosmicLink, threshold) {\n  number(cosmicLink, threshold, 'threshold', 0, 255)\n}\n\n/**\n * @param {cosmicLink} cosmicLink\n * @param {string|number} weight\n */\nexport function weight (cosmicLink, weight) {\n  number(cosmicLink, weight, 'weight', 0, 255)\n}\n","'use strict'\n\nimport {shorter} from './helpers'\nimport * as status from './status'\nimport * as check from './check'\nimport * as specs from './specs'\n\n/**\n * Decode fields values from URI to cosmic link JSON format. This format differs\n * from Stellar transaction format: it is simpler, allow for federated address\n * and can be stringified/parsed without loss of information.\n *\n * For each of those functions, any error is recorded in the `cosmicLink` object\n * and HTML nodes are updated accordingly.\n *\n * @module\n */\n\n/**\n * Decode `value` accordingly to `field` type.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} field\n * @param {string} value\n */\nexport function fieldValue (cosmicLink, field, value) {\n  const type = specs.fieldType[field]\n  const decodedValue = decodeURIComponent(value)\n  if (type) return typedValue(cosmicLink, type, decodedValue)\n  /// This error will be handled latter in convert.queryToTdesc()\n  else throw ''\n}\n\n/**\n * Decode `value` using the decoding function for `type`.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} type\n * @param {string} value\n */\nexport function typedValue (cosmicLink, type, value) {\n  const decoder = exports[type]\n  if (decoder) return decoder(cosmicLink, value)\n  else return value\n}\n\n/******************************************************************************/\n\n/**\n * Decode `amount` to cosmic link format.\n *\n * @param [cosmicLink] cosmicLink\n * @param [string] amount\n * @return [string]\n */\nexport function amount (cosmicLink, amount) {\n  check.amount(cosmicLink, amount)\n  return amount\n}\n\n/**\n * Decode `asset` to cosmic link format: { code: c, issuer: i }.\n *\n * @param [cosmicLink] cosmicLink\n * @param [string] asset Either 'code:issuer', 'native' or 'XLM'\n * @return [Object]\n */\nexport function asset (cosmicLink, asset) {\n  const assetLower = asset.toLowerCase()\n  if (assetLower === 'xlm' || assetLower === 'native') {\n    return { code: 'XLM' }\n  } else {\n    const temp = asset.split(':')\n    const object = { code: temp[0], issuer: temp[1] }\n    check.asset(cosmicLink, object)\n    return object\n  }\n}\n\n/**\n * Decode `assetList` to cosmic link format.\n *\n * @param [cosmicLink] cosmicLink\n * @param [string] assetsList Assets in URI format separated by comas\n * @return [Object]\n */\nexport function assetsArray (cosmicLink, assetsList) {\n  const strArray = assetsList.split(',')\n  let assetsArray = []\n  let isValid = true\n\n  strArray.forEach(value => {\n    try {\n      const parsedAsset = asset(cosmicLink, value)\n      assetsArray.push(parsedAsset)\n    } catch (error) {\n      console.log(error)\n      isValid = false\n    }\n  })\n\n  if (!isValid) status.error(cosmicLink, 'Invalid asset path', 'throw')\n  return assetsArray\n}\n\n/**\n * Convert `string` to corresponding boolean.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} string boolean\n * @return {boolean}\n */\nexport function boolean (cosmicLink, string) {\n  switch (string) {\n    case 'true': return true\n    case 'false': return false\n    default: status.error(cosmicLink, 'Invalid boolean: ' + string, 'throw')\n  }\n}\n\n/**\n * Convert an ISO 8601 formatted date string to the UNIX timestamp format used\n * in Stellar transactions.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} string ISO 8601 date\n * @return {timestamp}\n */\nexport function date (cosmicLink, string) {\n  const timeStamp = Date.parse(string)\n  if (isNaN(timeStamp)) {\n    status.error(cosmicLink, 'Invalid date (expecting ISO format): ' + string, 'throw')\n  }\n  return timeStamp / 1000\n}\n\n/**\n * Convert a string encoded `memo` (i.e. 'type:value') to an equivalent object\n * using cosmic link representation.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} memo\n * @return {object} JSON memo representation\n */\nexport function memo (cosmicLink, memo) {\n  const type = memo.replace(/:.*/, '')\n  const value = memo.replace(/^[^:]*:/, '')\n  if (type === value) {\n    status.error(cosmicLink, 'Missing memo type: ' + memo, 'throw')\n  } else {\n    return { type: type, value: value }\n  }\n}\n\n/**\n * Setup `cosmicLink.network` according to `network`. Throw an error if `network`\n * is invalid. Set error status if `network` is conflicting to `cosmicLink.network`.\n *\n * @param {CL}\n * @param {string} network\n * @return network\n */\nexport function network (cosmicLink, network) {\n  let previousNetwork = cosmicLink.network\n  cosmicLink.network = network\n\n  /// Check for network mismatch only after network validity check for\n  /// better error reporting.\n  if (previousNetwork && previousNetwork !== network) {\n    status.fail(cosmicLink, 'Network mismatch')\n    status.error(cosmicLink, 'Current account is not on network: ' + network)\n  }\n\n  return network\n}\n\n/**\n * Convert a `price` string to an equivalent object in cosmic link\n * representation, which is a string representing a number or a\n * { n: nominator, d: denominator } couple.\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} price\n * @return {string|object} JSON-compatible price object\n */\nexport function price (cosmicLink, price) {\n  const numerator = price.replace(/:.*/, '')\n  const denominator = price.replace(/^[^:]*:/, '')\n  if (numerator === denominator) {\n    return amount(cosmicLink, numerator)\n  } else {\n    const object = {}\n    object.n = +amount(cosmicLink, numerator)\n    object.d = +amount(cosmicLink, denominator)\n    return object\n  }\n}\n\n/**\n * Return a JSON-compatible represention of string-formatted `signer`.\n * String format for `signer` is 'weight,type:value'.\n * Object format is { weight: 'w', type: 't', value: 'v' }\n *\n * @param {cosmicLink} cosmicLink\n * @param {string} signer\n * @return {object}\n */\nexport function signer (cosmicLink, signer) {\n  const temp = signer.split(':')\n  if (temp.length > 3) {\n    status.error(cosmicLink, 'Invalid signer: ' + shorter(signer), 'throw')\n  }\n\n  const weight = temp[0]\n  const type = temp[1]\n  const value = temp[2]\n  const object = { type: type, value: value, weight: weight }\n\n  check.signer(cosmicLink, object)\n  return object\n}\n","'use strict'\n\nimport * as node from './node'\nimport {shorter} from './helpers'\n\nimport * as status from './status'\nimport * as convert from './convert'\nimport * as resolve from './resolve'\n\n/**\n * Contains the action methods for CosmicLink.\n *\n *\n * @module\n */\n\n/**\n * Sign `cosmicLink` using secret `Keypair`.\n * Return a promise that terminate when signing is over, and that resolve to\n * the signed Transaction object.\n *\n * @param {cosmicLink} cosmicLink\n * @param {seed} seed\n * @promise Signed Transaction object\n */\n\nexport async function sign (cosmicLink, seed) {\n  let keypair, publicKey\n  try {\n    keypair = StellarSdk.Keypair.fromSecret(seed)\n    publicKey = keypair.publicKey()\n  } catch (error) {\n    console.log(error)\n    throw new Error('Invalid secret seed')\n  }\n\n  if (cosmicLink.status) throw new Error(\"Can't sign invalid transaction\")\n  if (cosmicLink.signers && cosmicLink.signers.indexOf(publicKey) !== -1) {\n    throw new Error('Transaction already signed with this key')\n  }\n\n  const signingPromise = _signingPromise(cosmicLink, keypair, publicKey)\n\n  /// Immediatly update getters so that we get correct results even if dev\n  /// doesn't call cosmicLink.sign() with await.\n  cosmicLink.getTransaction = function () { return signingPromise }\n  cosmicLink.getXdr = function () {\n    return signingPromise.then(transaction =>\n      convert.transactionToXdr(cosmicLink, transaction)\n    )\n  }\n\n  await signingPromise\n}\n\nasync function _signingPromise (cosmicLink, keypair, publicKey) {\n  const transaction = await cosmicLink.getTransaction()\n  const eventNode = status.message(cosmicLink, 'Signing...')\n  _addLoadingAnim(eventNode)\n\n  try {\n    resolve.selectNetwork(cosmicLink)\n    transaction.sign(keypair)\n  } catch (error) {\n    console.log(error)\n    node.destroy(eventNode)\n    status.error(cosmicLink,\n      'Failed to sign with key: ' + shorter(publicKey),\n      'throw'\n    )\n  }\n\n  node.rewrite(eventNode, 'Signed with ' + shorter(publicKey))\n  if (!cosmicLink.signers) cosmicLink.signers = []\n  cosmicLink.signers.push(publicKey)\n\n  return transaction\n}\n\n/**\n * Send `cosmicLink`'s transaction to `server`. It should have been signed\n * beforehand.\n * Return a promise that terminate when submission is over.\n *\n * @param {CL}\n * @param {Server} [server=cosmicLink.server] Stellar SDK Server object\n * @return {Object} The server response\n */\nexport async function send (cosmicLink, server) {\n  if (!server) server = cosmicLink.server\n\n  const transaction = await cosmicLink.getTransaction()\n  if (!cosmicLink.signers) throw new Error(\"Can't send unsigned transaction\")\n\n  let eventNode = status.message(cosmicLink, 'Sending transaction...')\n  _addLoadingAnim(eventNode)\n\n  let answer\n  try {\n    answer = await server.submitTransaction(transaction)\n    node.rewrite(eventNode, 'Transaction submitted')\n    status.update(cosmicLink, 'Submitted')\n    node.appendClass(cosmicLink.statusNode, 'CL_done')\n  } catch (error) {\n    console.log(error)\n    node.destroy(eventNode)\n    status.error(cosmicLink, 'Transaction submission failed', 'throw')\n  }\n\n  return answer\n}\n\n/**\n * Add a loading animation inside `parent`.\n *\n * @private\n * @param {HTMLElement} parent\n */\nfunction _addLoadingAnim (parent) {\n  const loadingAnim = node.create('span', '.CL_loadingAnim')\n  parent.insertBefore(loadingAnim, parent.firstChild)\n  loadingAnim.style.float = 'left'\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","'use strict'\n\nimport * as action from './action'\nimport * as node from './node'\nimport * as event from './event'\nimport * as parse from './parse'\n\n/**\n * A `CosmicLink` object represents a Stellar transaction. It can be created\n * from an actual cosmic link or any link build with a cosmic link query, but\n * also from a Stellar Transaction object or its XDR representation.\n *\n * Additionally, it can be parsed from a `transaction descriptor`, which the\n * simplified format `CosmicLink`s are using to represent Stellar transaction.\n * This `transaction descriptor` can be written in its objectified form\n * (referred as `tdesc`) or stringified form (referred as `json`).\n *\n * To make a `CosmicLink` object, you'll need to provide the network on wich\n * it is valid, and may want to provide a default user, which could be your\n * accountID or the accountID of anybody using your service.\n *\n * @constructor\n * @param {*} transaction\n * @param {test|public} [userNetwork] The Stellar network to use, will be public\n *     by default.\n * @param {string} [userAddress] This is the fallback source address when none\n *     is specified from the transaction.\n * @param {Object} options Additional options\n */\n// --- Constructor ---\n// new CosmicLink(uri, \"[userNetwork]\", \"[userAddress]\")\n// new CosmicLink(query, \"[userNetwork]\", \"[userAddress]\")\n// new CosmicLink(transaction, \"[userNetwork]\", \"[userAddress]\", {options...})\n// new CosmicLink(xdr, \"[userNetwork]\", \"[userAddress]\", {options...})\n//\n// --- Options for transaction & xdr ---\n// stripSource = true   < Don't keep source account when converting to URI\n// network = ...        < Specify a network for this transaction\n//\n// --- Formats (get) ---\n// CosmicLink.getUri()          < Return a promise of the URI string\n// CosmicLink.getQuery()        < Return a promise of the query string\n// CosmicLink.getJson()         < Return stringified JSON of the object\n// CosmicLink.getTdesc()        < Return a promise of the transaction descriptor\n// CosmicLink.getTransaction()  < Return a promise of the transaction\n// CosmicLink.getXdr()          < Return a promise of the transaction's XDR\n//\n// --- Formats (parse) ---    <<< Update everything on the go >>>\n// *CosmicLink.parse          < Same use than constructor. Update the link.\n//\n// --- Datas ---           <<< Update everything on the go >>>\n// CosmicLink.user         < User address\n// *CosmicLink.aliases     < Local aliases for public keys\n// CosmicLink.network      < Test/Public network\n// CosmicLink.server       < The horizon server to use\n// CosmicLink.status       < Status of the CosmicLink (valid or specific error)\n// CosmicLink.errors       < An array of errors (or undefined if no error)\n// CosmicLink.page         < The base URI, without the query\n//\n// --- Actions ---\n// *CosmicLink.resolve()       < Resolve addresses and fetch sequence for offline signing\n// CosmicLink.sign(\"seed\")     < Sign the transaction\n// CosmicLink.send(\"[server]\") < Send the transaction to the network\n//\n// --- Tools ---\n// *CosmicLink.builder         < Builder akin to StellarSdk.TransactionBuilder\n// CosmicLink.onClick.format   < For onClick events on the HTML description\n// *CosmicLink.onParse.format  < Trigger when cosmicLink is re-parsed\n//\n// --- HTML Nodes ---\n// CosmicLink.transactionNode  < HTML description of the transaction\n// CosmicLink.statusNode       < HTML box for the signing & sending status\n\nexport class CosmicLink {\n  constructor (transaction, network, user, options) {\n    this.user = user\n    if (network) this.network = network\n\n    this._page = 'https://cosmic.link/'\n    this.onClick = event.defaultHandler\n\n    makeHtmlNodes(this)\n\n    parse.dispatch(this, transaction, options)\n\n    /// Fallback to public only when network is not set from the URI.\n    if (!this.network) this.network = 'public'\n  }\n\n  /// Actions\n  async sign (seed) { await action.sign(this, seed) }\n  async send (server) { await action.send(this, server) }\n\n  /// Datas\n  get page () {\n    return this._page\n  }\n  set page (uri) {\n    parse.setPage(this, uri)\n  }\n\n  get network () { return this._network }\n  set network (network) { parse.network(this, network) }\n}\n\nfunction makeHtmlNodes (cosmicLink) {\n  let transactionNode = node.grab('#CL_transactionNode')\n  if (transactionNode) {\n    node.clear(transactionNode)\n    transactionNode.className = 'CL_transactionNode'\n  } else {\n    transactionNode = node.create('div', '.CL_transactionNode')\n  }\n  node.append(transactionNode, node.create('div', '.CL_transaction'))\n\n  let statusNode = node.grab('#CL_statusNode')\n  if (statusNode) {\n    node.clear(statusNode)\n    statusNode.className = 'CL_statusNode'\n  } else {\n    statusNode = node.create('div', '.CL_statusNode')\n    node.append(transactionNode, statusNode)\n  }\n  node.append(statusNode,\n    node.create('span', '.CL_status'),\n    node.create('ul', '.CL_events')\n  )\n\n  cosmicLink.transactionNode = transactionNode\n  cosmicLink.statusNode = statusNode\n}\n"],"sourceRoot":""}